# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ubrkNocSX4PVaSHaspQw-41Yfu3097AH
"""

!pip install pycryptodome

from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
import hashlib

# Vulnerable to Quantum Attacks (RSA)
def generate_rsa_key():
    key = RSA.generate(2048)  # RSA with 2048 bits is vulnerable to Shor's algorithm
    return key

# Vulnerable to Quantum Attacks (AES)
def encrypt_data(data, key):
    cipher = AES.new(key.encode(), AES.MODE_ECB)  # AES with short key is vulnerable to Grover's algorithm
    encrypted = cipher.encrypt(data.encode())
    return encrypted

# Vulnerable to Quantum Attacks (SHA)
def hash_data(data):
    hash_object = hashlib.sha256(data.encode())  # SHA-256 is weakened by Grover's algorithm
    return hash_object.hexdigest()

# Example usage
if __name__ == "__main__":
    rsa_key = generate_rsa_key()
    aes_key = "shortkey123"  # Example of a weak AES key (too short)
    data = "Sensitive Information"

    encrypted_data = encrypt_data(data, aes_key)
    hashed_data = hash_data(data)

    print("RSA Key:", rsa_key)
    print("Encrypted Data:", encrypted_data)
    print("Hashed Data:", hashed_data)